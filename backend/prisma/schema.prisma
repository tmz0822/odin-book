// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile UserProfile?

  posts    Post[]
  comments Comment[]

  likes Post[] @relation("PostLikes")

  followers Follow[] @relation("follower")
  following Follow[] @relation("following")

  sentFollowRequests     FollowRequest[] @relation("sender")
  receivedFollowRequests FollowRequest[] @relation("receiver")
}

model UserProfile {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  bio       String?
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Follow {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
}

model FollowRequest {
  id        String              @id @default(uuid())
  status    FollowRequestStatus @default(PENDING)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  sender   User   @relation("sender", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("receiver", fields: [receiverId], references: [id])
  receiverId String

  @@unique([senderId, receiverId])
}

model Post {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  likes    User[]    @relation("PostLikes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id])
  postId String
}
